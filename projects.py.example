#
# Copy to projects.py and adjust as needed.
#

# Displayed on the edit page for the group in your GitLab installation
project_group_id = 123
project_group_name = 'your_group_name'

# Note: dictionary keys here must correspond to fields as given by
# https://docs.gitlab.com/ee/api/projects.html#create-project
#
# URLs are converted to include credentials at the end of this file,
# to avoid having to repeat it for every project.
projects = {
    'foo_project':
        'https://old.git.server.name/your_group_name/foo_project.git',
    'bar_project':
        'https://old.git.server.name/your_group_name/bar_project.git',

    # Can also contain more settings if needed. (maps 1-to-1 to the
    # GitLab API docs as referred to above.)
    'baz_project': {
        'import_url': 'https://old.git.server.name/your_group_name/baz_project.git',
        'issues_enabled': True,
        'wiki_enabled': True,

        # Set the following two properties if you want one or more projects
        # to be created in some other group than the default one.
        'group_name': 'external',
        'namespace_id': 12345
    }
}

for p in projects:
    import_url = projects[p]
    projects[p] = import_url.replace(
        'https://old.git.server.name',
        'https://user:password@old.git.server.name'
    )

# Define a function with this name if you need to determine the destination project ID dynamically.
get_dest_project_id_for_issue = None
get_dest_project_ids = None

# These two functions go together:
#
# def get_dest_project_id_for_issue(dest, new_issue)
#     TODO: implement logic here
#
# def get_dest_project_ids(dest):
#     # Typically find the project IDs from the Connection object somehow.
#     return [1, 2, 3]

# Define a function with this name if you need to mutate the issues before they are persisted to the
# GitLab database.
issue_mutator = None

# Here is an example method that you can adjust freely as you see fit.
# def issue_mutator(new_issue):
#     labels = new_issue.labels.split(',')
#
#     # The exceptions raised for non-existing labels are harmless and will be ignored.
#     try:
#         labels.remove('bad_label')
#     except ValueError:
#         pass
#     new_issue.labels = ','.join(labels)
